import json
from logging import info
import os
from pathlib import Path
import subprocess
import yaml
from .config import LabConfig
from .utils import run, ensure_incus_running, get_container_state, info, success, warning, error, fatal

class Lab:
    def __init__(self, root: Path):
        self.root = root.absolute()
        self.config_path = self.root / "lab.yaml"
        self.config = LabConfig(self.config_path).load()
        self.nodes_dir = self.root / "nodes"
        self.shared_dir = self.root / "shared"

    @classmethod
    def init(cls, path: Path):
        """Initialize a new lab"""
        path.mkdir(exist_ok=True)
        lab = cls(path)
        lab.nodes_dir.mkdir(exist_ok=True)
        lab.shared_dir.mkdir(exist_ok=True)

        # Create git repo
        if not (path / ".git").exists():
            subprocess.run(["git", "init"], cwd=path, text=True)
            subprocess.run(["git", "add", "."], cwd=path, text=True)
            subprocess.run(["git", "commit", "-m", "labkit: initial commit"], cwd=path, input="init", text=True)

        # Create README
        readme = path / "README.md"
        if not readme.exists():
            readme.write_text(f"# {lab.config['name']}\n\nGenerated by labkit.\n")

        success(f"Lab initialized at {path}")
        info("Next: labkit node add <name>")
        return lab

    def add_node(self, name: str):
        """Add a new node (container) to the lab"""
        ensure_incus_running()

        # Use override or fallback to config
        effective_template = template or self.config["template"]

        if not self._container_exists(effective_template):
            error(f"Template container '{effective_template}' not found!")
            return

        # Validate name
        if not name.replace("-", "").isalnum() or not name[0].islower():
            error("Invalid name: use lowercase letters, numbers, hyphens only")
            return

        # Check if exists
        if get_container_state(name):
            error(f"Container '{name}' already exists")
            return

        template = self.config["template"]
        info(f"Creating node '{name}' from template '{template}'...")
        success(f"Node '{name}' created and configured")

        # Clone container
        run(["incus", "copy", template, name], check=True)

        # Create node directory
        node_dir = self.nodes_dir / name
        node_dir.mkdir(exist_ok=True)

        # Create manifest.yaml
        manifest = node_dir / "manifest.yaml"
        manifest.write_text(f"""name: {name}
purpose: >-
  Replace with short description
role: unknown
tags: []
environment: development
owner: {self.config['user']}
lifecycle: experimental
created_via: labkit node add
dependencies: []
notes: |
  Add usage notes, gotchas, maintenance tips here.
""")

        # Create README.md
        readme = node_dir / "README.md"
        readme.write_text(f"# {name}\n\n> Update this with purpose and usage\n")

        # Mount node dir into container
        mount_point = self.config["node_mount"]["mount_point"]
        run([
            "incus", "config", "device", "add",
            name, "lab-node", "disk",
            f"path={mount_point}",
            f"source={node_dir}"
        ], check=True)

        # Mount shared dir
        if self.config["shared_storage"]["enabled"]:
            shared_mp = self.config["shared_storage"]["mount_point"]
            run([
                "incus", "config", "device", "add",
                name, "lab-shared", "disk",
                f"path={shared_mp}",
                f"source={self.shared_dir}"
            ], check=True)

        # Set labels
        run(["incus", "config", "set", name,
             f"user.lab={self.config['name']}",
             f"user.managed-by=labkit"])

        print(f"‚úÖ Node '{name}' created and configured")
        print(f"üìÅ Docs: {node_dir}")
        print(f"üîó Mounted: {node_dir} ‚Üí {name}:{mount_point}")

        env = os.environ.copy()
        env.setdefault("GIT_AUTHOR_NAME", "labkit")
        env.setdefault("GIT_COMMITTER_NAME", "labkit")
        env.setdefault("GIT_AUTHOR_EMAIL", "labkit@localhost")
        env.setdefault("GIT_COMMITTER_EMAIL", "labkit@localhost")

        try:
            subprocess.run(
                ["git", "commit", "-m", f"labkit: added node {name}"],
                cwd=self.root,
                input="Auto-generated by labkit\n",
                text=True,
                check=True,
                env=env,
                timeout=30
            )
            success(f"Committed node metadata for '{name}'")
        except subprocess.CalledProcessError as e:
            warning(f"Git commit failed (no changes or config issue) ‚Äî continuing anyway")
        except Exception as e:
            warning(f"Unexpected git error: {e}")

        # Auto-commit
        subprocess.run(["git", "add", "."], cwd=self.root, text=True)
        subprocess.run(["git", "commit", "-m", f"labkit: added node {name}"], cwd=self.root, input="auto", text=True)

    def remove_node(self, name: str, force: bool = False):
        """Remove a node"""
        state = get_container_state(name)
        if not state:
            print(f"‚ùå Container '{name}' not found")
            return

        if state == "Running" and not force:
            print(f"‚ö†Ô∏è '{name}' is running. Use --force to stop and delete.")
            return

        if force:
            run(["incus", "stop", name], check=True)
        run(["incus", "delete", name], check=True)

        print(f"üóëÔ∏è Deleted container '{name}'")

        # Don't delete node/ dir ‚Äî keep history
        print(f"üìò Node metadata preserved in {self.nodes_dir}/{name}")

def list_templates():
    result = run(["incus", "list", "--format=json"], silent=True)
    containers = json.loads(result.stdout)
    templates = [c for c in containers if c["config"].get("user.template") == "true"]
    for c in templates:
        print(f"üìå {c['name']}: {c.get('description', 'No description')}")